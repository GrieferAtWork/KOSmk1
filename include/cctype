/* MIT License
 *
 * Copyright (c) 2017 GrieferAtWork
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#ifndef __CCTYPE__
#define __CCTYPE__ 1

#include <kos/compiler.h>
#include <kos/config.h>
#include <kos/types.h>
#if defined(__DEBUG__) && !defined(__INTELLISENSE__)
#include <kos/assert.h>
#endif

#ifndef __cplusplus
#error "C++ only header"
#endif

#undef iscntrl
#undef ispunct
#undef isgraph
#undef isprint
#undef isspace
#undef isdigit
#undef islower
#undef isupper
#undef isalpha
#undef isalnum
#undef tolower
#undef toupper
#undef _tolower
#undef _toupper

#ifndef ____ctype_map_defined
#define ____ctype_map_defined 1
__DECL_BEGIN
extern __u8 const __ctype_map[256];
__DECL_END
#endif

#ifndef __F_IS_CNTRL
#define __F_IS_CNTRL 0x01
#define __F_IS_PUNCT 0x02
#define __F_IS_GRAPH 0x04
#define __F_IS_PRINT 0x08
#define __F_IS_SPACE 0x10
#define __F_IS_DIGIT 0x20
#define __F_IS_LOWER 0x40
#define __F_IS_UPPER 0x80
#endif

__CXX_DECL_BEGIN
namespace std {

// Delcare everything as a function to allow for their addresses to be taken
__local __wunused __constcall int isalnum(int __ch)  { return (::__ctype_map[__ch&0xff]&(__F_IS_DIGIT|__F_IS_LOWER|__F_IS_UPPER))!=0; }
__local __wunused __constcall int isalpha(int __ch)  { return (::__ctype_map[__ch&0xff]&(__F_IS_LOWER|__F_IS_UPPER))!=0; }
__local __wunused __constcall int isblank(int __ch)  { return __ch == '\t' || __ch == ' '; }
__local __wunused __constcall int iscntrl(int __ch)  { return (::__ctype_map[__ch&0xff]&__F_IS_CNTRL)!=0; }
__local __wunused __constcall int isdigit(int __ch)  { return (::__ctype_map[__ch&0xff]&__F_IS_DIGIT)!=0; }
__local __wunused __constcall int isgraph(int __ch)  { return (::__ctype_map[__ch&0xff]&__F_IS_GRAPH)!=0; }
__local __wunused __constcall int islower(int __ch)  { return (::__ctype_map[__ch&0xff]&__F_IS_LOWER)!=0; }
__local __wunused __constcall int isprint(int __ch)  { return (::__ctype_map[__ch&0xff]&__F_IS_PRINT)!=0; }
__local __wunused __constcall int ispunct(int __ch)  { return (::__ctype_map[__ch&0xff]&__F_IS_PUNCT)!=0; }
__local __wunused __constcall int isspace(int __ch)  { return (::__ctype_map[__ch&0xff]&__F_IS_SPACE)!=0; }
__local __wunused __constcall int isupper(int __ch)  { return (::__ctype_map[__ch&0xff]&__F_IS_UPPER)!=0; }
__local __wunused __constcall int isxdigit(int __ch) { return (__ch >= 'a' && __ch <= 'f') || (__ch >= 'A' && __ch <= 'F'); }
__local __wunused __constcall int tolower(int __ch)  { return __ch >= 'A' && __ch <= 'Z' ? __ch+('a'-'A') : __ch; }
__local __wunused __constcall int toupper(int __ch)  { return __ch >= 'a' && __ch <= 'z' ? __ch+('A'-'a') : __ch; }
#if defined(__DEBUG__) && !defined(__INTELLISENSE__)
__local __wunused __constcall int _tolower(int __ch) { __assertf(isupper(__ch),"'%c' is not uppercase",__ch); return __ch+('a'-'A'); }
__local __wunused __constcall int _toupper(int __ch) { __assertf(islower(__ch),"'%c' is not lowercase",__ch); return __ch+('A'-'a'); }
__forcelocal __wunused __constcall int __tolower_d(int __ch __LIBC_DEBUG__PARAMS) { __assert_atf("_tolower(...)",0,isupper(__ch),"'%c' is not uppercase",__ch); return __ch+('a'-'A'); }
__forcelocal __wunused __constcall int __toupper_d(int __ch __LIBC_DEBUG__PARAMS) { __assert_atf("_toupper(...)",0,islower(__ch),"'%c' is not lowercase",__ch); return __ch+('A'-'a'); }
// These macros are OK, as they still require the 'std::' prefix
#define _tolower(ch) __tolower_d(ch __LIBC_DEBUG__ARGS)
#define _toupper(ch) __toupper_d(ch __LIBC_DEBUG__ARGS)
#else
__local int _tolower(int __ch) { return __ch+('a'-'A'); }
__local int _toupper(int __ch) { return __ch+('A'-'a'); }
#endif

}
__CXX_DECL_END


#endif /* !__CTYPE_H__ */
