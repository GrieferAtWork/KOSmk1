#!/usr/bin/deemon

#include <file>
#include <fs>

/* This license also applies to this file! */
const license = "\
/* MIT License
 *
 * Copyright (c) 2017 GrieferAtWork
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the \"Software\"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */";

const file_pattern = list {
	// NOTE: Also files without an extension
	"*.h",
	"*.c",
	"*.inl",
	"*.dee",
	"*.S",
	"*.ld",
};

const exclude_paths = list {
	"*.git*",
	"*binutils*",
	"*build*",
	"*bin*",
	"*libs/libc/dlmalloc.inl",
	"*libs/libfdlibm*",
	"*userland/nano*",
};

function update_license(filename) {
	local text = file.open(filename,"r").read();
	text = text.replace("\r\n","\n").replace("\r","\n");
	if (text.lstrip().startswith("/*")) {
		local licbegin = text.index("/*");
		local licend = text.index("*/")+2;
		local newtext = text[:licbegin]+license+text[licend:];
		file.open(filename,"w").write(newtext);
	} else {
		print "{file} : WARNING: No license header found".format({
			.file = filename
		});
	}
}

function update_recursive(path) {
	for (local f: fs::dir(path)) {
		local full = fs::path::join(path,f).replace("\\","/");
		if ((for (local p: exclude_paths) full.wmatch(p)) || ...) continue;
		if (fs::isdir(full)) update_recursive(full);
		else if ("." !in f || ((
			for (local p: file_pattern) f.wmatch(p)
			) || ...)) {
			print "Updaing file:",repr full;
			update_license(full);
		}
	}
}

update_recursive(".");

















